AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  project: joshgann-site
  description: Creating a website to host my resume in AWS

Globals:
  Function:
    Timeout: 10
    MemorySize: 128

Conditions:
  IsProduction: !Equals [!Ref "AWS::StackName", "joshgann-site-backend-prod"]

Resources:
  GetCountFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: get_function/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment: 
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
      Events:
        GetCount:
          Type: Api 
          Properties:
            Path: /count
            Method: get
  
  PutCountFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: put_function/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment: 
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
      Events:
        PutCount:
          Type: Api 
          Properties:
            Path: /count
            Method: post

  MyWebsite:
    Type: AWS::S3::Bucket
    Condition: IsProduction
    Properties:
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      BucketName: www.joshgann.com

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Condition: IsProduction
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Serverless website in S3"
      
  BucketPolicy:
    DependsOn: 
      - CloudFrontOriginAccessIdentity
      - MyWebsite
    Type: AWS::S3::BucketPolicy
    Condition: IsProduction
    Properties:
      PolicyDocument:
        Id: WebPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref MyWebsite
                - /*
      Bucket: !Ref MyWebsite

  Route53Record:
    DependsOn: MyDistribution
    Type: AWS::Route53::RecordSetGroup
    Condition: IsProduction
    Properties:
      HostedZoneName: joshgann.com.
      RecordSets:
        - Name: www.joshgann.com
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt MyDistribution.DomainName
  
  ACMCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Condition: IsProduction
    Properties:
      DomainName: "*.joshgann.com"
      DomainValidationOptions:
        - DomainName: joshgann.com
          HostedZoneId: Z06569293TVGL8UW1FLSE
      ValidationMethod: DNS

  MyDistribution:
    DependsOn: ACMCertificate
    Type: AWS::CloudFront::Distribution
    Condition: IsProduction
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn: !Ref ACMCertificate
          SslSupportMethod: sni-only
        Aliases:
          - www.joshgann.com
        DefaultCacheBehavior:
          Compress: 'true'
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: s3-website
          DefaultTTL: 86400
          MinTTL: 1
          MaxTTL: 86400
          ForwardedValues:
            QueryString: false
        PriceClass: PriceClass_100
        Origins:
          - DomainName: !GetAtt MyWebsite.DomainName
            Id: s3-website
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        Enabled: "true"
        DefaultRootObject: index.html
        HttpVersion: http2

  DynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "visitcount"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "Id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      TableName: !If ["IsProduction", "ResumeCounter", "ResumeCounterDev"]


Outputs:
  VisitorCountApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
